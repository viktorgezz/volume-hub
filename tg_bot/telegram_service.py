import json
import os
import io
import logging
from typing import List
from telegram import Bot
from telegram.error import TelegramError
from telegram.request import HTTPXRequest
import mplfinance as mpf
import pandas as pd
import matplotlib.pyplot as plt

import httpx

from models import CandleDto, CandleAnomalyDto
from config import TELEGRAM_TOKEN, CHAT_IDS_FILE

logger = logging.getLogger(__name__)


class TelegramService:
    def __init__(self):
        limits = httpx.Limits(max_connections=20, max_keepalive_connections=20)
        request = HTTPXRequest(
            connect_timeout=30.0,
            read_timeout=30.0,
        )
        self.bot = Bot(token=TELEGRAM_TOKEN, request=request)

    def load_chat_ids(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ chat_id –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(CHAT_IDS_FILE):
            return []
        try:
            with open(CHAT_IDS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (json.JSONDecodeError, UnicodeDecodeError):
            logger.warning(f"–§–∞–π–ª {CHAT_IDS_FILE} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            self.save_chat_ids([])
            return []

    def save_chat_ids(self, chat_ids: List[str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ chat_id –≤ —Ñ–∞–π–ª"""
        with open(CHAT_IDS_FILE, "w", encoding="utf-8") as f:
            json.dump(chat_ids, f, ensure_ascii=False, indent=2)

    def add_chat_id(self, chat_id: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç chat_id –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç"""
        chat_ids = self.load_chat_ids()
        if chat_id not in chat_ids:
            chat_ids.append(chat_id)
            self.save_chat_ids(chat_ids)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π chat_id: {chat_id}")

    def create_candlestick_chart(self, candles: List[CandleDto], stock_name: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—á–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã"""
        try:
            df = pd.DataFrame([{
                'Date': candle.time,
                'Open': candle.open,
                'High': candle.high,
                'Low': candle.low,
                'Close': candle.close,
                'Volume': candle.volume
            } for candle in candles])

            df.set_index('Date', inplace=True)
            df.sort_index(inplace=True)

            fig, _ = mpf.plot(
                df,
                type='candle',
                style='charles',
                title=f'{stock_name}',
                ylabel='Price',
                volume=True,
                returnfig=True,
                figsize=(12, 8)
            )

            buf = io.BytesIO()
            fig.savefig(buf, format='png', bbox_inches='tight', dpi=150)
            plt.close(fig)
            return buf.getvalue()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {stock_name}: {e}")
            raise

    async def send_anomaly_notification(self, data: CandleAnomalyDto):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º"""
        try:
            message = (
                f"üîî –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º!\n"
                f"–ê–∫—Ç–∏–≤: <i>{data.name}</i>\n"
                f"–¢–∏–∫–µ—Ä: <i>{data.ticker if data.ticker else 'N/A'}</i>\n"
                f"–û–±—ä–µ–º: {data.volume:,}\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {data.priceDailyChangeAsPercentage:.2f}%\n"
                f"<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –º–∏–Ω—É—Ç—É: {data.priceMinuteChangeAsPercentage:.2f}%</b>\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {data.priceCurrent:.4f}\n"
                f"–í—Ä–µ–º—è: {data.time.strftime('%Y-%m-%d %H:%M:%S')}"
            )

            chart_bytes = self.create_candlestick_chart(data.candlesLastHour, data.name)
            chat_ids = self.load_chat_ids()

            results = []
            for chat_id in chat_ids:
                try:
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=io.BytesIO(chart_bytes),
                        caption=message,
                        parse_mode='HTML'
                    )
                    results.append({"chat_id": chat_id, "status": "success"})
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                except TelegramError as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}"
                    logger.error(error_msg)
                    results.append({"chat_id": chat_id, "status": "error", "error": str(e)})

            return results
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            raise

    async def send_message(self, chat_id: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            await self.bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
            return True
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return False
