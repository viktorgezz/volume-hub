import requests
from fastapi import FastAPI
from pydantic import BaseModel
from datetime import datetime
from typing import List
from telegram import Bot
from telegram.error import TelegramError
import mplfinance as mpf
import pandas as pd
import io
import base64
import os
import json

app = FastAPI()

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8045810367:AAFg_MwqTCX-qJTgJFhKFf8H4HsBPFH417A"
CHAT_IDS_FILE = "chat_ids.json"


# –ú–æ–¥–µ–ª—å –¥–ª—è CandleDto
class CandleDto(BaseModel):
    open: float
    close: float
    high: float
    low: float
    volume: int
    time: datetime


# –ú–æ–¥–µ–ª—å –¥–ª—è CandleAnomalyDto
class CandleAnomalyDto(BaseModel):
    name: str
    priceCurrent: float
    volume: int
    priceDailyChangeAsPercentage: float
    priceMinuteChangeAsPercentage: float
    time: datetime
    candlesLastHour: List[CandleDto]


def load_chat_ids():
    return ["908270204"]
    # if not os.path.exists(CHAT_IDS_FILE):
    #     return []
    # with open(CHAT_IDS_FILE, "r", encoding="utf-8") as f:
    #     return json.load(f)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤—Å–µ–º —á–∞—Ç–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞
async def send_telegram_message(message: str):
    bot = Bot(token=TELEGRAM_TOKEN)
    results = []
    chat_ids = load_chat_ids()
    for chat_id in chat_ids:
        try:
            await bot.send_message(chat_id=chat_id, text=message)
            results.append({"chat_id": chat_id, "status": "Message sent to Telegram"})
        except TelegramError as e:
            results.append({"chat_id": chat_id, "status": "Failed to send message", "error": str(e)})
    return results


def create_candlestick_chart(candles: List[CandleDto], stock_name: str) -> io.BytesIO:
    df = pd.DataFrame([{
        'Date': candle.time,
        'Open': candle.open,
        'High': candle.high,
        'Low': candle.low,
        'Close': candle.close,
        'Volume': candle.volume
    } for candle in candles])
    df.set_index('Date', inplace=True)
    # –í –∑–∞–≥–æ–ª–æ–≤–∫–µ —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏
    fig, axes = mpf.plot(
        df,
        type='candle',
        style='charles',
        title=f'{stock_name}',
        ylabel='Price',
        volume=True,
        returnfig=True,
        figsize=(12, 8)
    )
    buf = io.BytesIO()
    fig.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    return buf


# POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∏–µ–º–∞ JSON –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
@app.post("/data")
async def receive_candle_anomaly(data: CandleAnomalyDto):
    message = (
        f"üîî –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º!\n"
        f"–ê–∫—Ç–∏–≤: <i>{data.name}</i>\n"
        f"–û–±—ä–µ–º: {data.volume}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {data.priceDailyChangeAsPercentage}%\n"
        f"<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –º–∏–Ω—É—Ç—É: {data.priceMinuteChangeAsPercentage}%</b>\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {data.priceCurrent}\n"
        f"–í—Ä–µ–º—è: {data.time.strftime('%Y-%m-%d %H:%M:%S')}"
    )
    chart_image = create_candlestick_chart(data.candlesLastHour, data.name)
    bot = Bot(token=TELEGRAM_TOKEN)
    telegram_results = []
    chat_ids = load_chat_ids()
    for chat_id in chat_ids:
        try:
            await bot.send_photo(
                chat_id=chat_id,
                photo=chart_image,
                caption=message,
                parse_mode='HTML'
            )
            telegram_results.append({"chat_id": chat_id, "status": "Message and chart sent to Telegram"})
        except TelegramError as e:
            telegram_results.append({"chat_id": chat_id, "status": "Failed to send message", "error": str(e)})
    return {
        "received": data.dict(),
        "status": "ok",
        "telegram": telegram_results
    }