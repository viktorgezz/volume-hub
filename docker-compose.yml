version: '3.8'

services:
  db-anomaly:
    image: postgres:15
    container_name: db-anomaly
    environment:
      POSTGRES_USER: ${POSTGRES_USER_ANOMALY}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_ANOMALY}
      POSTGRES_DB: ${POSTGRES_DB_ANOMALY}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_anomaly:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER_ANOMALY}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbit_mq_1:
    image: rabbitmq:4-management
    container_name: rabbit_mq_1
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5

  api-app:
    build:
      context: ./api-T-connector
      dockerfile: Dockerfile
    container_name: api-app
    ports:
      - "8085:8085"
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_TEMPLATE_QUEUE=${RABBITMQ_TEMPLATE_QUEUE}
      - RABBITMQ_TEMPLATE_EXCHANGE=${RABBITMQ_TEMPLATE_EXCHANGE}
      - RABBITMQ_TEMPLATE_ROUTING_KEY=${RABBITMQ_TEMPLATE_ROUTING_KEY}
      - TOKEN_T_INVEST=${API_APP_TOKEN_T_INVEST}
      - URL_GUIDE=${URL_GUIDE}
    depends_on:
      rabbit_mq_1:
        condition: service_healthy

  define-anomaly-app:
    build:
      context: ./definition-of-anomaly
      dockerfile: Dockerfile
    container_name: define-anomaly-app
    ports:
      - "8090:8090"
    environment:
      - DATASOURCE_URL=${DEFINE_ANOMALY_DATASOURCE_URL}
      - DATASOURCE_USERNAME=${POSTGRES_USER_ANOMALY}
      - DATASOURCE_PASSWORD=${POSTGRES_PASSWORD_ANOMALY}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_TEMPLATE_EXCHANGE=${RABBITMQ_TEMPLATE_EXCHANGE}
      - RABBITMQ_TEMPLATE_QUEUE=${RABBITMQ_TEMPLATE_QUEUE}
      - RABBITMQ_TEMPLATE_ROUTING_KEY=${RABBITMQ_TEMPLATE_ROUTING_KEY}
      - TELEGRAM_URI=${DEFINE_ANOMALY_TELEGRAM_URI}
      - API_APP_URL=${API_APP_URL}
      - GUIDE_URL=${URL_GUIDE}
    depends_on:
      db-anomaly:
        condition: service_started

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name:
      api-gateway
    ports:
      - "8080:8080"
    environment:
      - URI_API_APP=${API_APP_URL}
      - URI_DEFINE_ANOMALY=${DEFINE_ANOMALY_VOLUME_URL}

  guide:
    build:
      context: company-info
      dockerfile: Dockerfile
    container_name:
      guide
    ports:
      - "8083:8083"
    environment:
      - DATASOURCE_URL=${GUIDE_DATASOURCE_URL}
      - DATASOURCE_USERNAME=${POSTGRES_USER_INFO}
      - DATASOURCE_PASSWORD=${POSTGRES_PASSWORD_INFO}

  db-info:
    image: postgres:15
    container_name: db-info
    environment:
      POSTGRES_USER: ${POSTGRES_USER_INFO}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_INFO}
      POSTGRES_DB: ${POSTGRES_DB_INFO}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data_info:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER_INFO}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ./tg_bot
      dockerfile: Dockerfile
    container_name:
      app-python
    ports:
      - "8000:8000"

volumes:
  postgres_data_anomaly:
  postgres_data_info:
  rabbitmq_data: